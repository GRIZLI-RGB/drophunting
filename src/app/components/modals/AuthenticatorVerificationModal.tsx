import { IoIosArrowBack, IoMdClose } from "react-icons/io";
import { useRef, useState } from "react";

type DeleteAccountModalType = {
  onClose: () => void;
  onBack?: () => void;
};

export const AuthenticatorVerificationModal = ({
  onClose,
  onBack,
}: DeleteAccountModalType) => {
  const [code, setCode] = useState<string[]>(Array(6).fill(""));
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);

  const handleChange = (index: number, value: string) => {
    if (!/^\d*$/.test(value)) return;

    const newCode = [...code];
    newCode[index] = value;
    setCode(newCode);

    if (value && index < 5) {
      inputRefs.current[index + 1]?.focus();
    }
  };

  const handleKeyDown = (
    index: number,
    e: React.KeyboardEvent<HTMLInputElement>
  ) => {
    if (e.key === "Backspace" && !code[index] && index > 0) {
      inputRefs.current[index - 1]?.focus();
    }
  };

  const handleBackClick = () => {
    if (onBack) {
      onBack();
    } else {
      onClose();
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-40 z-80 flex items-center justify-center">
      <div className="bg-[#1C1E22] rounded-[16px] p-6 max-w-[370px] w-full absolute top-[120px]">
        <button className="absolute top-5 right-5" onClick={onClose}>
          <IoMdClose size={24} className="text-[#8E8E8E] cursor-pointer" />
        </button>

        <div
          className="flex items-center gap-1 mb-[15px] cursor-pointer"
          onClick={handleBackClick}
        >
          <button>
            <IoIosArrowBack size={16} />
          </button>
          <p className="text-[14px] font-normal leading-[16px] font-sans">
            Back
          </p>
        </div>

        <div className="flex flex-col gap-[15px]">
          <p className="text-[22px] font-bold leading-[20px]">
            Security verification
          </p>

          <p className="text-[#949392] text-[14px] leading-[20px] mb-6">
            Enter the 6-digit code generated by the Authenticator App
          </p>
        </div>

        <div className="w-full flex items-center gap-[8px]">
          {[...Array(6)].map((_, index) => (
            <input
              key={index}
              ref={(el) => {
                inputRefs.current[index] = el;
              }}
              type="text"
              maxLength={1}
              inputMode="numeric"
              pattern="[0-9]*"
              value={code[index]}
              onChange={(e) => handleChange(index, e.target.value)}
              onKeyDown={(e) => handleKeyDown(index, e)}
              className="w-[48px] h-[64px] bg-[#292C33] rounded-[8px] text-center text-[24px] focus:outline-none focus:border-2 focus:border-[#CBFF51]"
            />
          ))}
        </div>

        <p className="text-[14px] leading-[20px] font-sans text-[#656768] mt-[24px]">
          The code valid for 30 minutes. Resend in 30 seconds. Choose other
          option
        </p>
      </div>
    </div>
  );
};
